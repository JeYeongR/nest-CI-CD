# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  pull_request:
    branches: ['main']

jobs:
  build:
    name: build and test
    runs-on: ubuntu-latest
    services:
      postgresql:
        image: postgis/postgis:latest
        env:
          DB_HOSTNAME: localhost
          DB_USERNAME: postgres
          DB_PASSWORD: 123456789
          DB_NAME: coffeeeeeeee
        ports:
          - 5432
    strategy:
      matrix:
        node-version: [20.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm install
      - run: npm run build --if-present
      - run: npm test

  docker-push:
    name: docker build and push
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ secrets.DOCKER_HUB_ID }}/${{ secrets.DOCKER_REPO }}:latest

  deploy:
    name: deploy
    needs: docker-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_IP }}
          username: ${{ secrets.REMOTE_SSH_ID }}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          port: ${{ secrets.REMOTE_SSH_PORT }}
          script: |
            sudo docker stop $(docker ps -qa)
            sudo docker rm -f $(docker ps -qa)
            sudo docker rmi -f $(docker images -q)
            sudo docker pull ${{ secrets.DOCKER_HUB_ID }}/${{ secrets.DOCKER_REPO }}
            sudo docker run -d -p 3000:3000 --name nest ${{ secrets.DOCKER_HUB_ID }}/${{ secrets.DOCKER_REPO }}
